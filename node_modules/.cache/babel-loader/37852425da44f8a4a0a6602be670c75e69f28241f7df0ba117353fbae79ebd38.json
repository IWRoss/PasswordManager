{"ast":null,"code":"import NodeRSA from \"encrypt-rsa\";\nconst nodeRSA = new NodeRSA(\"Z8W4M7K3R2P1V9L6N5T\", process.env.REACT_APP_PRIVATE_KEY);\nfunction encryptPrivateKey(password) {\n  const privateKey = process.env.REACT_APP_PRIVATE_KEY;\n  nodeRSA.encrypt({\n    password,\n    privateKey\n  });\n}\nfunction decryptPrivateKey(password) {\n  const privateKey = process.env.REACT_APP_PRIVATE_KEY;\n  nodeRSA.decryptStringWithRsaPrivateKey({\n    password,\n    privateKey\n  });\n}\nfunction encryptData(password, publicKey) {\n  const encryptedString = nodeRSA.encryptStringWithRsaPublicKey({\n    password,\n    publicKey\n  });\n  return encryptPrivateKey(encryptedString);\n}\nfunction decryptPublicKey(password, publicKey) {\n  let newpassword = nodeRSA.decrypt({\n    password,\n    publicKey\n  });\n  return decryptPrivateKey(newpassword);\n}\nexport { encryptData, encryptPrivateKey, decryptPublicKey, decryptPrivateKey };","map":{"version":3,"names":["NodeRSA","nodeRSA","process","env","REACT_APP_PRIVATE_KEY","encryptPrivateKey","password","privateKey","encrypt","decryptPrivateKey","decryptStringWithRsaPrivateKey","encryptData","publicKey","encryptedString","encryptStringWithRsaPublicKey","decryptPublicKey","newpassword","decrypt"],"sources":["/Users/developer/Node/PasswordManager/src/func/encryption.js"],"sourcesContent":["import NodeRSA from \"encrypt-rsa\";\n\nconst nodeRSA = new NodeRSA(\n  \"Z8W4M7K3R2P1V9L6N5T\",\n  process.env.REACT_APP_PRIVATE_KEY\n);\n\nfunction encryptPrivateKey(password) {\n  const privateKey = process.env.REACT_APP_PRIVATE_KEY;\n  nodeRSA.encrypt({ password, privateKey });\n}\n\nfunction decryptPrivateKey(password) {\n  const privateKey = process.env.REACT_APP_PRIVATE_KEY;\n  nodeRSA.decryptStringWithRsaPrivateKey({ password, privateKey });\n}\n\nfunction encryptData(password, publicKey) {\n  const encryptedString = nodeRSA.encryptStringWithRsaPublicKey({\n    password,\n    publicKey,\n  });\n  return encryptPrivateKey(encryptedString);\n}\n\nfunction decryptPublicKey(password, publicKey) {\n  let newpassword = nodeRSA.decrypt({ password, publicKey });\n  return decryptPrivateKey(newpassword);\n}\n\nexport { encryptData, encryptPrivateKey, decryptPublicKey, decryptPrivateKey };\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,aAAa;AAEjC,MAAMC,OAAO,GAAG,IAAID,OAAO,CACzB,qBAAqB,EACrBE,OAAO,CAACC,GAAG,CAACC,qBACd,CAAC;AAED,SAASC,iBAAiBA,CAACC,QAAQ,EAAE;EACnC,MAAMC,UAAU,GAAGL,OAAO,CAACC,GAAG,CAACC,qBAAqB;EACpDH,OAAO,CAACO,OAAO,CAAC;IAAEF,QAAQ;IAAEC;EAAW,CAAC,CAAC;AAC3C;AAEA,SAASE,iBAAiBA,CAACH,QAAQ,EAAE;EACnC,MAAMC,UAAU,GAAGL,OAAO,CAACC,GAAG,CAACC,qBAAqB;EACpDH,OAAO,CAACS,8BAA8B,CAAC;IAAEJ,QAAQ;IAAEC;EAAW,CAAC,CAAC;AAClE;AAEA,SAASI,WAAWA,CAACL,QAAQ,EAAEM,SAAS,EAAE;EACxC,MAAMC,eAAe,GAAGZ,OAAO,CAACa,6BAA6B,CAAC;IAC5DR,QAAQ;IACRM;EACF,CAAC,CAAC;EACF,OAAOP,iBAAiB,CAACQ,eAAe,CAAC;AAC3C;AAEA,SAASE,gBAAgBA,CAACT,QAAQ,EAAEM,SAAS,EAAE;EAC7C,IAAII,WAAW,GAAGf,OAAO,CAACgB,OAAO,CAAC;IAAEX,QAAQ;IAAEM;EAAU,CAAC,CAAC;EAC1D,OAAOH,iBAAiB,CAACO,WAAW,CAAC;AACvC;AAEA,SAASL,WAAW,EAAEN,iBAAiB,EAAEU,gBAAgB,EAAEN,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}