{"ast":null,"code":"const forge = require(\"node-forge\");\n\n// Function to generate RSA keys\nfunction generateKeyPair() {\n  const keypair = forge.pki.rsa.generateKeyPair({\n    bits: 2048,\n    e: 0x10001\n  });\n  const publicKey = forge.pki.publicKeyToPem(keypair.publicKey);\n  const privateKey = forge.pki.privateKeyToPem(keypair.privateKey);\n  return {\n    publicKey,\n    privateKey\n  };\n}\n\n// Function to encrypt data with a public key\nfunction encryptWithPublicKey(publicKey, data) {\n  const publicKeyObj = forge.pki.publicKeyFromPem(publicKey);\n  const encrypted = publicKeyObj.encrypt(data, \"RSA-OAEP\");\n  return forge.util.encode64(encrypted);\n}\n\n// Function to decrypt data with a private key\nfunction decryptWithPrivateKey(privateKey, encryptedData) {\n  const privateKeyObj = forge.pki.privateKeyFromPem(privateKey);\n  const encrypted = forge.util.decode64(encryptedData);\n  const decrypted = privateKeyObj.decrypt(encrypted, \"RSA-OAEP\");\n  return decrypted;\n}","map":{"version":3,"names":["forge","require","generateKeyPair","keypair","pki","rsa","bits","e","publicKey","publicKeyToPem","privateKey","privateKeyToPem","encryptWithPublicKey","data","publicKeyObj","publicKeyFromPem","encrypted","encrypt","util","encode64","decryptWithPrivateKey","encryptedData","privateKeyObj","privateKeyFromPem","decode64","decrypted","decrypt"],"sources":["/Users/developer/Node/PasswordManager/src/func/encryption.js"],"sourcesContent":["const forge = require(\"node-forge\");\n\n// Function to generate RSA keys\nfunction generateKeyPair() {\n  const keypair = forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\n  const publicKey = forge.pki.publicKeyToPem(keypair.publicKey);\n  const privateKey = forge.pki.privateKeyToPem(keypair.privateKey);\n  return { publicKey, privateKey };\n}\n\n// Function to encrypt data with a public key\nfunction encryptWithPublicKey(publicKey, data) {\n  const publicKeyObj = forge.pki.publicKeyFromPem(publicKey);\n  const encrypted = publicKeyObj.encrypt(data, \"RSA-OAEP\");\n  return forge.util.encode64(encrypted);\n}\n\n// Function to decrypt data with a private key\nfunction decryptWithPrivateKey(privateKey, encryptedData) {\n  const privateKeyObj = forge.pki.privateKeyFromPem(privateKey);\n  const encrypted = forge.util.decode64(encryptedData);\n  const decrypted = privateKeyObj.decrypt(encrypted, \"RSA-OAEP\");\n  return decrypted;\n}\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA,SAASC,eAAeA,CAAA,EAAG;EACzB,MAAMC,OAAO,GAAGH,KAAK,CAACI,GAAG,CAACC,GAAG,CAACH,eAAe,CAAC;IAAEI,IAAI,EAAE,IAAI;IAAEC,CAAC,EAAE;EAAQ,CAAC,CAAC;EACzE,MAAMC,SAAS,GAAGR,KAAK,CAACI,GAAG,CAACK,cAAc,CAACN,OAAO,CAACK,SAAS,CAAC;EAC7D,MAAME,UAAU,GAAGV,KAAK,CAACI,GAAG,CAACO,eAAe,CAACR,OAAO,CAACO,UAAU,CAAC;EAChE,OAAO;IAAEF,SAAS;IAAEE;EAAW,CAAC;AAClC;;AAEA;AACA,SAASE,oBAAoBA,CAACJ,SAAS,EAAEK,IAAI,EAAE;EAC7C,MAAMC,YAAY,GAAGd,KAAK,CAACI,GAAG,CAACW,gBAAgB,CAACP,SAAS,CAAC;EAC1D,MAAMQ,SAAS,GAAGF,YAAY,CAACG,OAAO,CAACJ,IAAI,EAAE,UAAU,CAAC;EACxD,OAAOb,KAAK,CAACkB,IAAI,CAACC,QAAQ,CAACH,SAAS,CAAC;AACvC;;AAEA;AACA,SAASI,qBAAqBA,CAACV,UAAU,EAAEW,aAAa,EAAE;EACxD,MAAMC,aAAa,GAAGtB,KAAK,CAACI,GAAG,CAACmB,iBAAiB,CAACb,UAAU,CAAC;EAC7D,MAAMM,SAAS,GAAGhB,KAAK,CAACkB,IAAI,CAACM,QAAQ,CAACH,aAAa,CAAC;EACpD,MAAMI,SAAS,GAAGH,aAAa,CAACI,OAAO,CAACV,SAAS,EAAE,UAAU,CAAC;EAC9D,OAAOS,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}