{"ast":null,"code":"const crypto = require(\"crypto\");\n\n// Function to generate RSA keys\nfunction generateKeyPair() {\n  const {\n    publicKey,\n    privateKey\n  } = crypto.generateKeyPairSync(\"rsa\", {\n    modulusLength: 2048,\n    publicKeyEncoding: {\n      type: \"spki\",\n      format: \"pem\"\n    },\n    privateKeyEncoding: {\n      type: \"pkcs8\",\n      format: \"pem\"\n    }\n  });\n  return {\n    publicKey,\n    privateKey\n  };\n}\n\n// Function to encrypt data with a public key\nfunction encryptWithPublicKey(publicKey, data) {\n  const buffer = Buffer.from(data, \"utf8\");\n  const encrypted = crypto.publicEncrypt(publicKey, buffer);\n  return encrypted.toString(\"base64\");\n}\n\n// Function to decrypt data with a private key\nfunction decryptWithPrivateKey(privateKey, encryptedData) {\n  const buffer = Buffer.from(encryptedData, \"base64\");\n  const decrypted = crypto.privateDecrypt(privateKey, buffer);\n  return decrypted.toString(\"utf8\");\n}\n\n// Example usage\nconst {\n  publicKey,\n  privateKey\n} = generateKeyPair();\nconsole.log(\"Public Key:\", publicKey);\nconsole.log(\"Private Key:\", privateKey);\nconst data = \"Hello, World!\";\nconst encryptedData = encryptWithPublicKey(publicKey, data);\nconsole.log(\"Encrypted Data:\", encryptedData);\nconst decryptedData = decryptWithPrivateKey(privateKey, encryptedData);\nconsole.log(\"Decrypted Data:\", decryptedData);","map":{"version":3,"names":["crypto","require","generateKeyPair","publicKey","privateKey","generateKeyPairSync","modulusLength","publicKeyEncoding","type","format","privateKeyEncoding","encryptWithPublicKey","data","buffer","Buffer","from","encrypted","publicEncrypt","toString","decryptWithPrivateKey","encryptedData","decrypted","privateDecrypt","console","log","decryptedData"],"sources":["/Users/developer/Node/PasswordManager/src/func/encryption.js"],"sourcesContent":["const crypto = require(\"crypto\");\n\n// Function to generate RSA keys\nfunction generateKeyPair() {\n  const { publicKey, privateKey } = crypto.generateKeyPairSync(\"rsa\", {\n    modulusLength: 2048,\n    publicKeyEncoding: {\n      type: \"spki\",\n      format: \"pem\",\n    },\n    privateKeyEncoding: {\n      type: \"pkcs8\",\n      format: \"pem\",\n    },\n  });\n  return { publicKey, privateKey };\n}\n\n// Function to encrypt data with a public key\nfunction encryptWithPublicKey(publicKey, data) {\n  const buffer = Buffer.from(data, \"utf8\");\n  const encrypted = crypto.publicEncrypt(publicKey, buffer);\n  return encrypted.toString(\"base64\");\n}\n\n// Function to decrypt data with a private key\nfunction decryptWithPrivateKey(privateKey, encryptedData) {\n  const buffer = Buffer.from(encryptedData, \"base64\");\n  const decrypted = crypto.privateDecrypt(privateKey, buffer);\n  return decrypted.toString(\"utf8\");\n}\n\n// Example usage\nconst { publicKey, privateKey } = generateKeyPair();\nconsole.log(\"Public Key:\", publicKey);\nconsole.log(\"Private Key:\", privateKey);\n\nconst data = \"Hello, World!\";\nconst encryptedData = encryptWithPublicKey(publicKey, data);\nconsole.log(\"Encrypted Data:\", encryptedData);\n\nconst decryptedData = decryptWithPrivateKey(privateKey, encryptedData);\nconsole.log(\"Decrypted Data:\", decryptedData);\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA,SAASC,eAAeA,CAAA,EAAG;EACzB,MAAM;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGJ,MAAM,CAACK,mBAAmB,CAAC,KAAK,EAAE;IAClEC,aAAa,EAAE,IAAI;IACnBC,iBAAiB,EAAE;MACjBC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE;IACV,CAAC;IACDC,kBAAkB,EAAE;MAClBF,IAAI,EAAE,OAAO;MACbC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EACF,OAAO;IAAEN,SAAS;IAAEC;EAAW,CAAC;AAClC;;AAEA;AACA,SAASO,oBAAoBA,CAACR,SAAS,EAAES,IAAI,EAAE;EAC7C,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACH,IAAI,EAAE,MAAM,CAAC;EACxC,MAAMI,SAAS,GAAGhB,MAAM,CAACiB,aAAa,CAACd,SAAS,EAAEU,MAAM,CAAC;EACzD,OAAOG,SAAS,CAACE,QAAQ,CAAC,QAAQ,CAAC;AACrC;;AAEA;AACA,SAASC,qBAAqBA,CAACf,UAAU,EAAEgB,aAAa,EAAE;EACxD,MAAMP,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACK,aAAa,EAAE,QAAQ,CAAC;EACnD,MAAMC,SAAS,GAAGrB,MAAM,CAACsB,cAAc,CAAClB,UAAU,EAAES,MAAM,CAAC;EAC3D,OAAOQ,SAAS,CAACH,QAAQ,CAAC,MAAM,CAAC;AACnC;;AAEA;AACA,MAAM;EAAEf,SAAS;EAAEC;AAAW,CAAC,GAAGF,eAAe,CAAC,CAAC;AACnDqB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAErB,SAAS,CAAC;AACrCoB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEpB,UAAU,CAAC;AAEvC,MAAMQ,IAAI,GAAG,eAAe;AAC5B,MAAMQ,aAAa,GAAGT,oBAAoB,CAACR,SAAS,EAAES,IAAI,CAAC;AAC3DW,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,aAAa,CAAC;AAE7C,MAAMK,aAAa,GAAGN,qBAAqB,CAACf,UAAU,EAAEgB,aAAa,CAAC;AACtEG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}