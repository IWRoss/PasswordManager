{"ast":null,"code":"const forge = require(\"node-forge\");\n\n// Function to generate RSA keys\nfunction generateKeyPair() {\n  const keypair = forge.pki.rsa.generateKeyPair({\n    bits: 2048,\n    e: 0x10001\n  });\n  const publicKey = forge.pki.publicKeyToPem(keypair.publicKey);\n  const privateKey = forge.pki.privateKeyToPem(keypair.privateKey);\n  return {\n    publicKey,\n    privateKey\n  };\n}\n\n// Function to encrypt data with a public key\nfunction encryptWithPublicKey(data) {\n  const publicKeyObj = forge.pki.publicKeyFromPem(process.env.REACT_APP_PUBLIC_KEY.replace(/\\\\n/g, \"\\n\"));\n  const encrypted = publicKeyObj.encrypt(data, \"RSA-OAEP\");\n  return forge.util.encode64(encrypted);\n}\n\n// Function to decrypt data with a private key\nfunction decryptWithPrivateKey(encryptedData) {\n  const privateKeyObj = forge.pki.privateKeyFromPem(process.env.REACT_APP_PRIVATE_KEY.replace(/\\\\n/g, \"\\n\"));\n  const encrypted = forge.util.decode64(encryptedData);\n  const decrypted = privateKeyObj.decrypt(encrypted, \"RSA-OAEP\");\n  return decrypted;\n}\nexport { generateKeyPair, encryptWithPublicKey, decryptWithPrivateKey };","map":{"version":3,"names":["forge","require","generateKeyPair","keypair","pki","rsa","bits","e","publicKey","publicKeyToPem","privateKey","privateKeyToPem","encryptWithPublicKey","data","publicKeyObj","publicKeyFromPem","process","env","REACT_APP_PUBLIC_KEY","replace","encrypted","encrypt","util","encode64","decryptWithPrivateKey","encryptedData","privateKeyObj","privateKeyFromPem","REACT_APP_PRIVATE_KEY","decode64","decrypted","decrypt"],"sources":["/Users/developer/Node/PasswordManager/src/func/encryption.js"],"sourcesContent":["const forge = require(\"node-forge\");\n\n// Function to generate RSA keys\nfunction generateKeyPair() {\n  const keypair = forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\n  const publicKey = forge.pki.publicKeyToPem(keypair.publicKey);\n  const privateKey = forge.pki.privateKeyToPem(keypair.privateKey);\n  return { publicKey, privateKey };\n}\n\n// Function to encrypt data with a public key\nfunction encryptWithPublicKey(data) {\n  const publicKeyObj = forge.pki.publicKeyFromPem(\n    process.env.REACT_APP_PUBLIC_KEY.replace(/\\\\n/g, \"\\n\")\n  );\n  const encrypted = publicKeyObj.encrypt(data, \"RSA-OAEP\");\n  return forge.util.encode64(encrypted);\n}\n\n// Function to decrypt data with a private key\nfunction decryptWithPrivateKey(encryptedData) {\n  const privateKeyObj = forge.pki.privateKeyFromPem(\n    process.env.REACT_APP_PRIVATE_KEY.replace(/\\\\n/g, \"\\n\")\n  );\n  const encrypted = forge.util.decode64(encryptedData);\n  const decrypted = privateKeyObj.decrypt(encrypted, \"RSA-OAEP\");\n  return decrypted;\n}\n\nexport { generateKeyPair, encryptWithPublicKey, decryptWithPrivateKey };\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA,SAASC,eAAeA,CAAA,EAAG;EACzB,MAAMC,OAAO,GAAGH,KAAK,CAACI,GAAG,CAACC,GAAG,CAACH,eAAe,CAAC;IAAEI,IAAI,EAAE,IAAI;IAAEC,CAAC,EAAE;EAAQ,CAAC,CAAC;EACzE,MAAMC,SAAS,GAAGR,KAAK,CAACI,GAAG,CAACK,cAAc,CAACN,OAAO,CAACK,SAAS,CAAC;EAC7D,MAAME,UAAU,GAAGV,KAAK,CAACI,GAAG,CAACO,eAAe,CAACR,OAAO,CAACO,UAAU,CAAC;EAChE,OAAO;IAAEF,SAAS;IAAEE;EAAW,CAAC;AAClC;;AAEA;AACA,SAASE,oBAAoBA,CAACC,IAAI,EAAE;EAClC,MAAMC,YAAY,GAAGd,KAAK,CAACI,GAAG,CAACW,gBAAgB,CAC7CC,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAACC,OAAO,CAAC,MAAM,EAAE,IAAI,CACvD,CAAC;EACD,MAAMC,SAAS,GAAGN,YAAY,CAACO,OAAO,CAACR,IAAI,EAAE,UAAU,CAAC;EACxD,OAAOb,KAAK,CAACsB,IAAI,CAACC,QAAQ,CAACH,SAAS,CAAC;AACvC;;AAEA;AACA,SAASI,qBAAqBA,CAACC,aAAa,EAAE;EAC5C,MAAMC,aAAa,GAAG1B,KAAK,CAACI,GAAG,CAACuB,iBAAiB,CAC/CX,OAAO,CAACC,GAAG,CAACW,qBAAqB,CAACT,OAAO,CAAC,MAAM,EAAE,IAAI,CACxD,CAAC;EACD,MAAMC,SAAS,GAAGpB,KAAK,CAACsB,IAAI,CAACO,QAAQ,CAACJ,aAAa,CAAC;EACpD,MAAMK,SAAS,GAAGJ,aAAa,CAACK,OAAO,CAACX,SAAS,EAAE,UAAU,CAAC;EAC9D,OAAOU,SAAS;AAClB;AAEA,SAAS5B,eAAe,EAAEU,oBAAoB,EAAEY,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}