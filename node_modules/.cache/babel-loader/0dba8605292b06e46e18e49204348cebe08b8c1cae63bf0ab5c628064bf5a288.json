{"ast":null,"code":"var _jsxFileName = \"/Users/ryanbudd/PasswordManager/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useContext, useState, createContext, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  // States here\n\n  const [employeeData, setEmployeeData] = useState([]); //[username, password, accessTier]\n  const [loggedUsername, setLoggedUsername] = useState(\"\");\n  const [loggedPassword, setLoggedPassword] = useState(\"\");\n  const [loggedAccess, setLoggedAccess] = useState(\"\");\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n  const [auth, setAuth] = useState({\n    isAuthorised: false,\n    errors: [],\n    username: false\n  });\n  // Functions here\n\n  const registerEmployee = (username, password) => {\n    //(employee username, employee password)\n    let found = false;\n    for (let i = 0; i < employeeData.length; i++) {\n      if (employeeData[i][0] == username) {\n        //is the entered username already in the employee database?\n        found = true;\n      }\n    }\n    if (found == false) {\n      setEmployeeData([...employeeData, [username, password, \"None\"]]);\n    }\n  };\n  const logIn = (username, password) => {\n    let index = 0;\n    let found = false;\n    for (let i = 0; i < employeeData.length; i++) {\n      if (employeeData[i][0] == username) {\n        if (employeeData[i][1] == password) {\n          found = true;\n          index = i;\n        }\n      }\n    }\n    if (found == true) {\n      setUserLoggedIn(true);\n      setLoggedUsername(employeeData[index][0]);\n      setLoggedPassword(employeeData[index][1]);\n      setLoggedAccess(employeeData[index][2]);\n      setAuth({\n        ...auth,\n        isAuthorised: true,\n        username: username\n      });\n    } else {\n      setAuth({\n        ...auth,\n        isAuthorised: false,\n        username: false,\n        errors: [\"Credentials not correct\"]\n      });\n    }\n  };\n  const logOut = () => {\n    if (userLoggedIn) {\n      setUserLoggedIn(false);\n      setLoggedUsername(\"None\");\n      setLoggedPassword(\"None\");\n      setLoggedAccess(\"None\");\n    }\n  };\n  const setEmployeeDataByIndex = (index, key, value) => {\n    const newEmployeeData = employeeData[index];\n    newEmployeeData[key] = value;\n    setEmployeeData([...employeeData.slice(0, index - 1), newEmployeeData, ...employeeData.slice(index + 1)]);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      employeeData,\n      setEmployeeData,\n      setEmployeeDataByIndex,\n      loggedUsername,\n      setLoggedUsername,\n      loggedPassword,\n      setLoggedPassword,\n      loggedAccess,\n      setLoggedAccess,\n      logIn,\n      logOut,\n      registerEmployee\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"RZ/6jOPZC5nG0CGfpaPxBdMDylA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useContext","useState","createContext","useMemo","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","employeeData","setEmployeeData","loggedUsername","setLoggedUsername","loggedPassword","setLoggedPassword","loggedAccess","setLoggedAccess","userLoggedIn","setUserLoggedIn","auth","setAuth","isAuthorised","errors","username","registerEmployee","password","found","i","length","logIn","index","logOut","setEmployeeDataByIndex","key","value","newEmployeeData","slice","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryanbudd/PasswordManager/src/contexts/AuthContext.js"],"sourcesContent":["import { useContext, useState, createContext, useMemo } from \"react\";\n\nexport const AuthContext = createContext();\n\nexport function useAuth() { return useContext(AuthContext) };\n\nexport const AuthProvider = ({children}) => {\n\n    // States here\n\n    const [employeeData, setEmployeeData] = useState([]);  //[username, password, accessTier]\n    const [loggedUsername, setLoggedUsername] = useState(\"\");\n    const [loggedPassword, setLoggedPassword] = useState(\"\");\n    const [loggedAccess, setLoggedAccess] = useState(\"\");\n    const [userLoggedIn, setUserLoggedIn] = useState(false);\n    const [auth, setAuth] = useState({\n        isAuthorised: false,\n        errors: [],\n        username: false,\n    });\n    // Functions here\n\n    const registerEmployee = (username, password) => {  //(employee username, employee password)\n        let found = false;\n        for (let i = 0; i < employeeData.length; i++) {\n            if (employeeData[i][0] == username) {\n                //is the entered username already in the employee database?\n                found = true;\n            }\n        }\n        if (found == false) {\n            setEmployeeData([\n                ...employeeData,\n                [username, password, \"None\"]\n            ]);\n        }        \n    }\n\n    const logIn = (username, password) => {\n        let index = 0\n        let found = false;\n        for (let i = 0; i < employeeData.length; i++) {\n            if (employeeData[i][0] == username) {\n                if (employeeData[i][1] == password){\n                    found = true;\n                    index = i;\n                }\n            } \n        }\n        if (found == true) {\n            setUserLoggedIn(true);\n            setLoggedUsername(employeeData[index][0]);\n            setLoggedPassword(employeeData[index][1]);\n            setLoggedAccess(employeeData[index][2]);\n            setAuth({\n                ...auth,\n                isAuthorised: true,\n                username: username,\n            });\n        } else {\n            setAuth({\n                ...auth,\n                isAuthorised: false,\n                username: false,\n                errors: [\"Credentials not correct\"],\n            });\n        }\n    }\n\n    const logOut = () => {\n        if (userLoggedIn) {\n            setUserLoggedIn(false);\n            setLoggedUsername(\"None\");\n            setLoggedPassword(\"None\");\n            setLoggedAccess(\"None\");\n        }\n    }\n\n    const setEmployeeDataByIndex = (index, key, value) => {\n        const newEmployeeData = employeeData[index];\n        newEmployeeData[key] = value;\n        setEmployeeData([\n            ...employeeData.slice(0, index-1),\n            newEmployeeData,\n            ...employeeData.slice(index+1)\n        ])\n    };\n\n    return (\n        <AuthContext.Provider value={{\n            employeeData,\n            setEmployeeData,\n            setEmployeeDataByIndex,\n            loggedUsername,\n            setLoggedUsername,\n            loggedPassword,\n            setLoggedPassword,\n            loggedAccess,\n            setLoggedAccess,\n            logIn,\n            logOut,\n            registerEmployee\n        }}>\n            {children}\n        </AuthContext.Provider>\n    )\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}