{"ast":null,"code":"var _jsxFileName = \"/Users/developer/Node/PasswordManager/src/contexts/MainMenuContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useContext, useState, createContext, useEffect } from \"react\";\nimport { useDatabase } from \"./DatabaseContext\";\nimport { useAuth } from \"./AuthContext\";\nimport Loader from \"../components/Loader/Loader\";\nimport NodeRSA from \"encrypt-rsa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainMenuContext = /*#__PURE__*/createContext();\nexport function useMainMenu() {\n  _s();\n  return useContext(MainMenuContext);\n}\n_s(useMainMenu, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const MainMenuProvider = ({\n  children\n}) => {\n  _s2();\n  //States here\n  const {\n    getItems,\n    addItem,\n    deleteItem\n  } = useDatabase();\n\n  //Internal Vars\n  const [userData, setUserData] = useState([]);\n  const [LowTierData, setLowTierData] = useState(false);\n  const [MidTierData, setMidTierData] = useState(false);\n  const [HighTierData, setHighTierData] = useState(false);\n  const nodeRSA = new NodeRSA();\n  let publicKey = \"Z8W4M7K3R2P1V9L6N5T\";\n\n  // This will fire on component mount\n  useEffect(() => {\n    (async (_credentials$filter, _credentials$filter2, _credentials$filter3) => {\n      const credentials = await getItems(\"credentials\");\n      if (!credentials) {\n        setLowTierData([]);\n        setMidTierData([]);\n        setHighTierData([]);\n        return;\n      }\n      setLowTierData((_credentials$filter = credentials.filter(credential => credential.tier === \"Low\")) !== null && _credentials$filter !== void 0 ? _credentials$filter : []);\n      setMidTierData((_credentials$filter2 = credentials.filter(credential => credential.tier === \"Medium\")) !== null && _credentials$filter2 !== void 0 ? _credentials$filter2 : []);\n      setHighTierData((_credentials$filter3 = credentials.filter(credential => credential.tier === \"High\")) !== null && _credentials$filter3 !== void 0 ? _credentials$filter3 : []);\n    })();\n  }, []);\n\n  //const [LowTierData, setLowTierData] = useState([]);\n  //const [MidTierData, setMidTierData] = useState([]);\n  //const [HighTierData, setHighTierData] = useState([]);\n\n  //Imported Vars\n  const {\n    employeeData,\n    loggedAccess,\n    setEmployeeDataByIndex,\n    userLoggedIn\n  } = useAuth();\n\n  //Functions here\n\n  const promoteEmployee = username => {\n    if (userLoggedIn && loggedAccess === \"Master\") {\n      for (let i = 0; i < employeeData.length; i++) {\n        if (employeeData[i].username === username) {\n          //is the entered username in the employee database?\n          switch (employeeData[i].tier) {\n            case \"High\":\n              setEmployeeDataByIndex(i, 2, \"Master\");\n              break;\n            case \"Medium\":\n              setEmployeeDataByIndex(i, 2, \"High\");\n              break;\n            case \"Low\":\n              setEmployeeDataByIndex(i, 2, \"Medium\");\n              break;\n            default:\n              setEmployeeDataByIndex(i, 2, \"Low\");\n              break;\n          }\n        }\n      }\n    }\n  };\n  const demoteEmployee = username => {\n    //Debug method - decrease access level\n    if (userLoggedIn && loggedAccess === \"Master\") {\n      for (let i = 0; i < employeeData.length; i++) {\n        if (employeeData[i].username === username) {\n          switch (employeeData[i].tier) {\n            case \"Master\":\n              setEmployeeDataByIndex(i, 2, \"High\");\n              break;\n            case \"High\":\n              setEmployeeDataByIndex(i, 2, \"Medium\");\n              break;\n            case \"Medium\":\n              setEmployeeDataByIndex(i, 2, \"Low\");\n              break;\n            default:\n              setEmployeeDataByIndex(i, 2, \"None\");\n              break;\n          }\n        }\n      }\n    }\n  };\n  const addLowLevelData = async (username, password) => {\n    if (loggedAccess !== \"None\") {\n      var _credentials$filter$m;\n      // Perform action on database\n      const newItemID = await addItem(\"credentials\", {\n        username,\n        password: encryptData(password, publicKey),\n        tier: \"Low\"\n      });\n\n      // Confirm action was performed on database\n      if (!newItemID) {\n        console.error(\"Didn't work\");\n        return;\n      }\n\n      // If so, update state\n      setLowTierData((_credentials$filter$m = credentials.filter(credential => credential.tier === \"Low\").map(credential => ({\n        ...credential,\n        password: decryptPublicKey(credential.password, publicKey)\n      }))) !== null && _credentials$filter$m !== void 0 ? _credentials$filter$m : []);\n    }\n  };\n  const addMidLevelData = async (username, password) => {\n    if (loggedAccess !== (\"None\" || \"Low\")) {\n      var _credentials$filter$m2;\n      const newItemID = await addItem(\"credentials\", {\n        username,\n        password: encryptData(password, publicKey),\n        tier: \"Medium\"\n      });\n      if (!newItemID) {\n        console.error(\"Didn't work\");\n        return;\n      }\n      setMidTierData((_credentials$filter$m2 = credentials.filter(credential => credential.tier === \"Medium\").map(credential => ({\n        ...credential,\n        password: decryptPublicKey(credential.password, publicKey)\n      }))) !== null && _credentials$filter$m2 !== void 0 ? _credentials$filter$m2 : []);\n    }\n  };\n  const addHighLevelData = async (username, password) => {\n    if (loggedAccess !== (\"None\" || \"Low\" || \"Medium\")) {\n      var _credentials$filter$m3;\n      const newItemID = await addItem(\"credentials\", {\n        username,\n        password: encryptData(password, publicKey),\n        tier: \"High\"\n      });\n      if (!newItemID) {\n        console.error(\"Didn't work\");\n        return;\n      }\n      setHighTierData((_credentials$filter$m3 = credentials.filter(credential => credential.tier === \"High\").map(credential => ({\n        ...credential,\n        password: decryptPublicKey(credential.password, publicKey)\n      }))) !== null && _credentials$filter$m3 !== void 0 ? _credentials$filter$m3 : []);\n    }\n  };\n  const removeLowLevelData = async (username, password) => {\n    console.log(\"Attempting to remove.\");\n    const index = LowTierData.findIndex(credential => credential.username === username && credential.password === password);\n    if (index !== -1) {\n      if (loggedAccess !== \"None\") {\n        const credential = LowTierData[index];\n        await deleteItem(\"credentials\", credential);\n        console.log(\"Removing Data...\");\n        const newArr = [...LowTierData.slice(0, index), ...LowTierData.slice(index + 1)];\n        setLowTierData(newArr);\n      }\n    }\n  };\n  const removeMidLevelData = async (username, password) => {\n    console.log(\"Attempting to remove.\");\n    const index = MidTierData.findIndex(credential => credential.username === username && credential.password === password);\n    if (index !== -1) {\n      if (loggedAccess !== \"None\" || \"Low\") {\n        const credential = MidTierData[index];\n        await deleteItem(\"credentials\", credential);\n        console.log(\"Removing Data...\");\n        const newArr = [...MidTierData.slice(0, index), ...MidTierData.slice(index + 1)];\n        setMidTierData(newArr);\n      }\n    }\n  };\n  const removeHighLevelData = async (username, password) => {\n    console.log(\"Attempting to remove.\");\n    const index = HighTierData.findIndex(credential => credential.username === username && credential.password === password);\n    if (index !== -1) {\n      if (loggedAccess !== \"None\" || \"Low\" || \"Medium\") {\n        const credential = HighTierData[index];\n        await deleteItem(\"credentials\", credential);\n        console.log(\"Removing Data...\");\n        const newArr = [...HighTierData.slice(0, index), ...HighTierData.slice(index + 1)];\n        setHighTierData(newArr);\n      }\n    }\n  };\n  const accessLowLevelData = () => {\n    if (loggedAccess !== \"None\") {\n      return LowTierData;\n    }\n  };\n  const accessMidLevelData = () => {\n    if (loggedAccess !== (\"None\" || \"Low\")) {\n      return MidTierData;\n    }\n  };\n  const accessHighLevelData = () => {\n    if (loggedAccess !== (\"None\" || \"Low\" || \"Medium\")) {\n      return HighTierData;\n    }\n  };\n  if (!LowTierData || !MidTierData || !HighTierData) {\n    return /*#__PURE__*/_jsxDEV(Loader, {\n      message: \"Importing data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MainMenuContext.Provider, {\n    value: {\n      userData,\n      setUserData,\n      LowTierData,\n      setLowTierData,\n      MidTierData,\n      setMidTierData,\n      HighTierData,\n      setHighTierData,\n      promoteEmployee,\n      demoteEmployee,\n      addLowLevelData,\n      addMidLevelData,\n      addHighLevelData,\n      removeLowLevelData,\n      removeMidLevelData,\n      removeHighLevelData,\n      accessLowLevelData,\n      accessMidLevelData,\n      accessHighLevelData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n};\n_s2(MainMenuProvider, \"du63TXWy6E1n/vbBX8sd5PWOWpg=\", false, function () {\n  return [useDatabase, useAuth];\n});\n_c = MainMenuProvider;\nvar _c;\n$RefreshReg$(_c, \"MainMenuProvider\");","map":{"version":3,"names":["useContext","useState","createContext","useEffect","useDatabase","useAuth","Loader","NodeRSA","jsxDEV","_jsxDEV","MainMenuContext","useMainMenu","_s","MainMenuProvider","children","_s2","getItems","addItem","deleteItem","userData","setUserData","LowTierData","setLowTierData","MidTierData","setMidTierData","HighTierData","setHighTierData","nodeRSA","publicKey","_credentials$filter","_credentials$filter2","_credentials$filter3","credentials","filter","credential","tier","employeeData","loggedAccess","setEmployeeDataByIndex","userLoggedIn","promoteEmployee","username","i","length","demoteEmployee","addLowLevelData","password","_credentials$filter$m","newItemID","encryptData","console","error","map","decryptPublicKey","addMidLevelData","_credentials$filter$m2","addHighLevelData","_credentials$filter$m3","removeLowLevelData","log","index","findIndex","newArr","slice","removeMidLevelData","removeHighLevelData","accessLowLevelData","accessMidLevelData","accessHighLevelData","message","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["/Users/developer/Node/PasswordManager/src/contexts/MainMenuContext.js"],"sourcesContent":["import { useContext, useState, createContext, useEffect } from \"react\";\n\nimport { useDatabase } from \"./DatabaseContext\";\nimport { useAuth } from \"./AuthContext\";\nimport Loader from \"../components/Loader/Loader\";\nimport NodeRSA from \"encrypt-rsa\";\n\nexport const MainMenuContext = createContext();\n\nexport function useMainMenu() {\n  return useContext(MainMenuContext);\n}\n\nexport const MainMenuProvider = ({ children }) => {\n  //States here\n  const { getItems, addItem, deleteItem } = useDatabase();\n\n  //Internal Vars\n  const [userData, setUserData] = useState([]);\n\n  const [LowTierData, setLowTierData] = useState(false);\n  const [MidTierData, setMidTierData] = useState(false);\n  const [HighTierData, setHighTierData] = useState(false);\n  const nodeRSA = new NodeRSA();\n\n  let publicKey = \"Z8W4M7K3R2P1V9L6N5T\";\n\n  // This will fire on component mount\n  useEffect(() => {\n    (async () => {\n      const credentials = await getItems(\"credentials\");\n\n      if (!credentials) {\n        setLowTierData([]);\n        setMidTierData([]);\n        setHighTierData([]);\n        return;\n      }\n\n      setLowTierData(\n        credentials.filter((credential) => credential.tier === \"Low\") ?? []\n      );\n\n      setMidTierData(\n        credentials.filter((credential) => credential.tier === \"Medium\") ?? []\n      );\n\n      setHighTierData(\n        credentials.filter((credential) => credential.tier === \"High\") ?? []\n      );\n    })();\n  }, []);\n\n  //const [LowTierData, setLowTierData] = useState([]);\n  //const [MidTierData, setMidTierData] = useState([]);\n  //const [HighTierData, setHighTierData] = useState([]);\n\n  //Imported Vars\n  const { employeeData, loggedAccess, setEmployeeDataByIndex, userLoggedIn } =\n    useAuth();\n\n  //Functions here\n\n  const promoteEmployee = (username) => {\n    if (userLoggedIn && loggedAccess === \"Master\") {\n      for (let i = 0; i < employeeData.length; i++) {\n        if (employeeData[i].username === username) {\n          //is the entered username in the employee database?\n          switch (employeeData[i].tier) {\n            case \"High\":\n              setEmployeeDataByIndex(i, 2, \"Master\");\n              break;\n            case \"Medium\":\n              setEmployeeDataByIndex(i, 2, \"High\");\n              break;\n            case \"Low\":\n              setEmployeeDataByIndex(i, 2, \"Medium\");\n              break;\n            default:\n              setEmployeeDataByIndex(i, 2, \"Low\");\n              break;\n          }\n        }\n      }\n    }\n  };\n\n  const demoteEmployee = (username) => {\n    //Debug method - decrease access level\n    if (userLoggedIn && loggedAccess === \"Master\") {\n      for (let i = 0; i < employeeData.length; i++) {\n        if (employeeData[i].username === username) {\n          switch (employeeData[i].tier) {\n            case \"Master\":\n              setEmployeeDataByIndex(i, 2, \"High\");\n              break;\n            case \"High\":\n              setEmployeeDataByIndex(i, 2, \"Medium\");\n              break;\n            case \"Medium\":\n              setEmployeeDataByIndex(i, 2, \"Low\");\n              break;\n            default:\n              setEmployeeDataByIndex(i, 2, \"None\");\n              break;\n          }\n        }\n      }\n    }\n  };\n\n  const addLowLevelData = async (username, password) => {\n    if (loggedAccess !== \"None\") {\n      // Perform action on database\n      const newItemID = await addItem(\"credentials\", {\n        username,\n        password: encryptData(password, publicKey),\n        tier: \"Low\",\n      });\n\n      // Confirm action was performed on database\n      if (!newItemID) {\n        console.error(\"Didn't work\");\n        return;\n      }\n\n      // If so, update state\n      setLowTierData(\n        credentials\n          .filter((credential) => credential.tier === \"Low\")\n          .map((credential) => ({\n            ...credential,\n            password: decryptPublicKey(credential.password, publicKey),\n          })) ?? []\n      );\n    }\n  };\n\n  const addMidLevelData = async (username, password) => {\n    if (loggedAccess !== (\"None\" || \"Low\")) {\n      const newItemID = await addItem(\"credentials\", {\n        username,\n        password: encryptData(password, publicKey),\n        tier: \"Medium\",\n      });\n\n      if (!newItemID) {\n        console.error(\"Didn't work\");\n        return;\n      }\n\n      setMidTierData(\n        credentials\n          .filter((credential) => credential.tier === \"Medium\")\n          .map((credential) => ({\n            ...credential,\n            password: decryptPublicKey(credential.password, publicKey),\n          })) ?? []\n      );\n    }\n  };\n\n  const addHighLevelData = async (username, password) => {\n    if (loggedAccess !== (\"None\" || \"Low\" || \"Medium\")) {\n      const newItemID = await addItem(\"credentials\", {\n        username,\n        password: encryptData(password, publicKey),\n        tier: \"High\",\n      });\n\n      if (!newItemID) {\n        console.error(\"Didn't work\");\n        return;\n      }\n\n      setHighTierData(\n        credentials\n          .filter((credential) => credential.tier === \"High\")\n          .map((credential) => ({\n            ...credential,\n            password: decryptPublicKey(credential.password, publicKey),\n          })) ?? []\n      );\n    }\n  };\n\n  const removeLowLevelData = async (username, password) => {\n    console.log(\"Attempting to remove.\");\n\n    const index = LowTierData.findIndex(\n      (credential) =>\n        credential.username === username && credential.password === password\n    );\n\n    if (index !== -1) {\n      if (loggedAccess !== \"None\") {\n        const credential = LowTierData[index];\n\n        await deleteItem(\"credentials\", credential);\n\n        console.log(\"Removing Data...\");\n\n        const newArr = [\n          ...LowTierData.slice(0, index),\n          ...LowTierData.slice(index + 1),\n        ];\n\n        setLowTierData(newArr);\n      }\n    }\n  };\n\n  const removeMidLevelData = async (username, password) => {\n    console.log(\"Attempting to remove.\");\n\n    const index = MidTierData.findIndex(\n      (credential) =>\n        credential.username === username && credential.password === password\n    );\n\n    if (index !== -1) {\n      if (loggedAccess !== \"None\" || \"Low\") {\n        const credential = MidTierData[index];\n\n        await deleteItem(\"credentials\", credential);\n\n        console.log(\"Removing Data...\");\n\n        const newArr = [\n          ...MidTierData.slice(0, index),\n          ...MidTierData.slice(index + 1),\n        ];\n\n        setMidTierData(newArr);\n      }\n    }\n  };\n\n  const removeHighLevelData = async (username, password) => {\n    console.log(\"Attempting to remove.\");\n\n    const index = HighTierData.findIndex(\n      (credential) =>\n        credential.username === username && credential.password === password\n    );\n\n    if (index !== -1) {\n      if (loggedAccess !== \"None\" || \"Low\" || \"Medium\") {\n        const credential = HighTierData[index];\n\n        await deleteItem(\"credentials\", credential);\n\n        console.log(\"Removing Data...\");\n\n        const newArr = [\n          ...HighTierData.slice(0, index),\n          ...HighTierData.slice(index + 1),\n        ];\n\n        setHighTierData(newArr);\n      }\n    }\n  };\n\n  const accessLowLevelData = () => {\n    if (loggedAccess !== \"None\") {\n      return LowTierData;\n    }\n  };\n\n  const accessMidLevelData = () => {\n    if (loggedAccess !== (\"None\" || \"Low\")) {\n      return MidTierData;\n    }\n  };\n\n  const accessHighLevelData = () => {\n    if (loggedAccess !== (\"None\" || \"Low\" || \"Medium\")) {\n      return HighTierData;\n    }\n  };\n\n  if (!LowTierData || !MidTierData || !HighTierData) {\n    return <Loader message=\"Importing data...\" />;\n  }\n\n  return (\n    <MainMenuContext.Provider\n      value={{\n        userData,\n        setUserData,\n        LowTierData,\n        setLowTierData,\n        MidTierData,\n        setMidTierData,\n        HighTierData,\n        setHighTierData,\n        promoteEmployee,\n        demoteEmployee,\n        addLowLevelData,\n        addMidLevelData,\n        addHighLevelData,\n        removeLowLevelData,\n        removeMidLevelData,\n        removeHighLevelData,\n        accessLowLevelData,\n        accessMidLevelData,\n        accessHighLevelData,\n      }}\n    >\n      {children}\n    </MainMenuContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}